"""Main file for GNBot"""
from telebot.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from funcs import tr_w, rend_d, hi_r, log
from config import TOKEN, API  # TEST_TOKEN
from datetime import datetime as dt
from pars import parser_memes
from threading import Timer
from telebot import TeleBot
import requests
import db
import time
import random
import re


bot = TeleBot(TOKEN)
log('Bot is successful running!')


@bot.message_handler(commands=['start'])  # /start
def start_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–µ–Ω—è –∑–æ–≤—É—Ç GNBotüñ•\n'
                                      '–Ø —Å–æ–∑–¥–∞–Ω –¥–∞–±—ã —Å–ª—É–∂–∏—Ç—å –≤–µ—Ä–æ–π –∏ –ø—Ä–∞–≤–¥–æ–π —Å–æ–æ–±—â–µ—Å—Ç–≤—É üíé–ì–æ–ª—É–±–æ–π –Ω–æ—Å–æ–∫üíé')
    log(message, 'info')


@bot.message_handler(commands=['help'])  # /help
def help_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, 'start - –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n'
                                      'ru_meme - –†–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n'
                                      'en_meme - –†–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –º–µ–º\n'
                                      'gif - –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–∏—Ñ–∫–∞\n'
                                      'joke - –†–∞–Ω–¥–æ–º–Ω–∞—è —à—É—Ç–∫–∞\n'
                                      'dice - –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫\n'
                                      'sticker - –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –Ω–∞—à–µ–π –±–∞–∑—ã –¥–¥–∞–Ω—ã—Ö\n'
                                      'sticker_gn - –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –ì–ù\n'
                                      'weather - –ü–æ–≥–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n'
                                      'translate - –ü–µ–µ—Ä–µ–≤–æ–¥—á–∏–∫\n'
                                      '______–ê–¥–º–∏–Ω_–∫–æ–º–∞–Ω–¥—ã______\n'
                                      '–û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞: \n'
                                      '- –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –ë–î)\n'
                                      '–°–ª–æ–≤–æ - –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É —Å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–µ–π –∫ —Å–ª–æ–≤—É –≤ –ë–î)\n'
                                      '-parser (–û—Ç–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ë–î)')
    log(message, 'info')


@bot.message_handler(commands=['gif'])  # /gif
def gif_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_video')
    while True:
        data = requests.get(API['API_Gif']).json()
        if hi_r(data['data']['rating']):
            bot.send_document(message.chat.id, data['data']['images']['downsized_large']['url'])
            break
    log(message, 'info')


@bot.message_handler(commands=['joke'])  # /joke
def joke_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(2)
    joke = db.get_joke()
    if joke['panchline'] != 'False':
        bot.send_message(message.chat.id, joke['setup'] + 'üßê')
        time.sleep(4)
        bot.send_message(message.chat.id, joke['panchline'] + 'üåö')
    else:
        bot.send_message(message.chat.id, joke['setup'] + 'üåö')


@bot.message_handler(commands=['ru_meme'])  # /ru_meme
def meme_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.send_photo(message.chat.id, db.random_meme())
    log(message, 'info')


@bot.message_handler(commands=['en_meme'])  # /en_meme
def meme_en_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_photo')
    meme = requests.get(API['API_Meme']).json()
    bot.send_photo(message.chat.id, meme['url'])
    log(message, 'info')


@bot.message_handler(commands=['weather'])  # /weather
def weather_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton('–•–∞—Ä—å–∫–æ–≤', callback_data='Kharkov'),
                 InlineKeyboardButton('–ü–æ–ª—Ç–∞–≤–∞', callback_data='Poltava'))
    msg = bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –∏–∑ –≥–æ—Ä–æ–¥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä—Å—É–µ—Ç?üßê', reply_markup=keyboard)
    time.sleep(10)
    bot.delete_message(msg.chat.id, msg.message_id)


@bot.message_handler(commands=['music'])  # /music
def music_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton('–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é', callback_data='artist?q='),
                 InlineKeyboardButton('–ü–æ —Ç—Ä–µ–∫—É', callback_data='track?q='))
    msg = bot.send_message(message.chat.id, '–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É?üéß', reply_markup=keyboard)
    # time.sleep(10)
    # bot.delete_message(msg.chat.id, msg.message_id)


@bot.message_handler(commands=['translate'])  # /translate
def translate_handler(message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏')
    bot.register_next_step_handler(msg, trans_word)
    log(message, 'info')


@bot.message_handler(commands=['sticker_gn'])  # /sticker_gn
def gn_sticker_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.send_sticker(message.chat.id, db.random_gn_sticker())
    log(message, 'info')


@bot.message_handler(commands=['sticker'])  # /sticker
def sticker_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.send_sticker(message.chat.id, db.random_sticker())
    log(message, 'info')


@bot.message_handler(content_types=['sticker'])  # Add new sticker
def add_sticker_handler(message: Message) -> None:
    db.add_sticker(message.sticker.file_id, message.sticker.emoji, message.sticker.set_name)


@bot.message_handler(content_types=['voice'])  # Answer on voice
def voice_handler(message: Message) -> None:
    if rend_d():
        bot.send_chat_action(message.chat.id, 'typing')
        bot.reply_to(message, random.choice(['–ß—ë —Ç—ã —Ç–∞–º –ø–∏–∑–¥–∞–Ω—É–ª? –ü–æ–≤—Ç–æ—Ä–∏!', '–ü–∏—Å–∫–ª—è–≤—ã–π –≥–æ–ª–æ—Å–æ–∫',
                                             '–õ—É—á—à–µ –±—ã —è —ç—Ç–æ –Ω–µ —Å–ª—ã—à–∞–ª']))


@bot.message_handler(content_types=['new_chat_members'])  # Answer on new member
def new_member_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, random.choice(['–û–ø–∞ —á–∏—Ä–∏–∫! –í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è',
                                                     '–ê–ª–æ—Ö–∞ –¥—Ä—É–≥ –º–æ–π!']))


@bot.message_handler(content_types=['left_chat_member'])  # Answer on left group
def left_member_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, random.choice(['–°–ª–∏–ª—Å—è –ø–∞–¥–ª–æ(', '–ë—É–µ–Ω–æ—Å –º—É—á–∞—á–µ—Å –ø–∏–¥—Ä–∏–ª–∞—Å', '–ü—Ä–æ—â–∞–π –ª—é–±–æ–≤—å –º–æ—è']))


@bot.message_handler(content_types=['location'])  # Answer on location
def location_handler(message: Message) -> None:
    if rend_d():
        bot.send_chat_action(message.chat.id, 'typing')
        bot.reply_to(message.chat.id, ['–°–∫–∏–Ω—É–ª –º—É—Å–æ—Ä–∞–º', '–ü—Ä–∏–∫–æ–ø –∏–ª–∏ –º–∞–≥–Ω–∏—Ç?', '–ï–±–µ–Ω—è –∫–∞–∫–∏–µ —Ç–æ'])


@bot.message_handler(content_types=['contact'])  # Answer on contact
def contact_handler(message: Message) -> None:
    if rend_d():
        bot.send_chat_action(message.chat.id, 'typing')
        bot.reply_to(message.chat.id, random.choice(['–ï—Å–ª–∏ –º–Ω–µ –±—É–¥–µ—Ç –æ–¥–∏–Ω–æ–∫–æ –∏ —Ö–æ–ª–æ–¥–Ω–æ —è –∑–Ω–∞—é –∫—É–¥–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å',
                                                     '–¢—Ä—É–±–∫—É –Ω–µ –±–µ—Ä—É—Ç', '–°–æ—Ö—Ä–∞–Ω–∏–ª']))


@bot.message_handler(content_types=['text'], regexp=r'^-parser$')  # Turn on parser
def parser_handler(message: Message) -> None:
    parser_memes()
    bot.reply_to(message, random.choice(['–Ø —Å–¥–µ–ª–∞–ª—å', '–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ', '–ì–æ—Ç–æ–≤–æ',
                                         '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ó–∞—Ç–µ—è —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º']))


@bot.message_handler(content_types=['text'], regexp=r'^\+$')  # Change karma
@bot.message_handler(content_types=['text'], regexp=r'^\-$')
def text_handler(message: Message) -> None:
    if message.reply_to_message:
        reply_to = message.reply_to_message.from_user
        if message.text == '+':
            bot.send_message(message.chat.id, f'{message.from_user.username.title()} –ø–æ–¥–∫–∏–Ω—É–ª 10 –∫ –∫–∞—Ä–º–µ '
                                                    f'{reply_to.username.title()}\n–ò—Ç–æ–≥–æ –∫–∞—Ä–º–∞: '
                                                    f'{db.change_karma(reply_to, "+")}')
        else:
            bot.send_message(message.chat.id, f'{message.from_user.username.title()} –æ—Å—É–∂–¥–∞–µ—Ç –Ω–∞ -10 '
                                                    f'{reply_to.username.title()}\n–ò—Ç–æ–≥–æ –∫–∞—Ä–º–∞: '
                                                    f'{db.change_karma(reply_to, "-")}')
        db.change_karma(reply_to, message.text)
        time.sleep(20)


@bot.message_handler(content_types=['text'], regexp=r'^-.+$')  # Add answer to DB
def text_handler(message: Message) -> None:
    db.add_answer(message.text.replace('-', '').lstrip())
    bot.reply_to(message, random.choice(['–ü—Ä–∏–Ω—è–ª –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ', '–£—Å–ª—ã—à–∞–ª', '+', '–ó–∞–ø–æ–º–Ω–∏–ª', '–¢–≤–æ–∏ –º–æ–ª—å–±—ã —É—Å–ª—ã—à–∞–Ω—ã']))


@bot.message_handler(content_types=['text'], regexp=r'^\w+.?-.?\w.+$')  # Add answer with word to DB
def text_handler(message: Message) -> None:
    word = re.findall(r'\w.+-', message.text)[0].replace('-', '').rstrip()
    answer = re.findall(r'-.\w.+', message.text)[0].replace('-', '').lstrip()
    db.add_to_db(word, answer)
    bot.reply_to(message, random.choice(['–ü—Ä–∏–Ω—è–ª –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ', '–£—Å–ª—ã—à–∞–ª', '+', '–ó–∞–ø–æ–º–Ω–∏–ª', '–¢–≤–æ–∏ –º–æ–ª—å–±—ã —É—Å–ª—ã—à–∞–Ω—ã']))


# Dice local storage
first_dice: dict = {'username': None, 'dice': 0}
second_dice: dict = {'username': None, 'dice': 0}


@bot.message_handler(commands=['dice'])  # /dice
def dice_handler(message: Message) -> None:
    res = requests.post(f'https://api.telegram.org/bot{TOKEN}/sendDice?chat_id={message.chat.id}').json()
    log(message, 'info')
    t = Timer(120.0, reset_users)
    if first_dice['username'] is None:
        first_dice['username'], first_dice['dice'] = message.from_user.username, res['result']['dice']['value']
        t.start()
    elif second_dice['username'] is None:
        second_dice['username'], second_dice['dice'] = message.from_user.username, res['result']['dice']['value']
        t.cancel()
        if first_dice['username'] != second_dice['username']:
            bot.send_chat_action(message.chat.id, 'typing')
            time.sleep(4)
            if first_dice['dice'] > second_dice['dice']:
                bot.send_message(message.chat.id, f'{first_dice["username"].title()}ü•á –ø–æ–±–µ–¥–∏–ª '
                                                  f'{second_dice["username"].title()}ü•à')
            elif first_dice['dice'] < second_dice['dice']:
                bot.send_message(message.chat.id, f'{second_dice["username"].title()}ü•á –ø–æ–±–µ–¥–∏–ª '
                                                  f'{first_dice["username"].title()}ü•à')
            else:
                bot.send_message(message.chat.id, '–ü–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞ü§ù')
        reset_users()


def reset_users():
    first_dice['username'] = None
    first_dice['dice'] = 0
    second_dice['username'] = None
    second_dice['dice'] = 0


@bot.message_handler(content_types=['text'])  # All messages
@bot.edited_message_handler(content_types=['text'])
def text_handler(message: Message) -> None:
    print(message)
    if dt.fromtimestamp(message.date).strftime("%Y-%m-%d-%H.%M.%S") >= dt.now().strftime("%Y-%m-%d-%H.%M.%S"):
        log(message, 'info')
        text = message.text.lower()
        if text in ['—Å—Ç–∏–∫–µ—Ä', '—Å—Ç–∏–∫–µ—Ä–æ—á–µ–∫', 'sticker']:
            gn_sticker_handler(message)
        elif text in ['–≥–∏—Ñ–∫–∞', '–≥–∏—Ñ', '–≥–∏—Ñ–æ–Ω', 'gif']:
            gif_handler(message)
        elif text in ['–º–µ–º', '–º–µ–º–∞—Å', '–º–µ–º—á–∏–∫', 'meme']:
            meme_handler(message)
        elif text in ['—à—É—Ç–∫–∞', '—à—É—Ç–∫—É', 'joke']:
            joke_handler(message)
        elif text in ['–∫—É–±–∏–∫', '–∑–∞—Ä–∏–∫', '–∫–æ—Å—Ç—å', '—Ö—É—é–±–∏–∫', 'dice']:
            dice_handler(message)
        if rend_d():
            for i in [',', '.', '!', '?', '\'', '\"', '-']:
                text = text.replace(i, '')
            text = list(text.split(' '))
            result = [x for x in text if x in db.get_all_word()]
            if result:
                bot.send_chat_action(message.chat.id, 'typing')
                bot.reply_to(message, db.get_answer(random.choice(result)))
            elif rend_d():
                bot.reply_to(message, db.get_simple_answer())


@bot.callback_query_handler(func=lambda call: True)  # Catch callback's
def callback_query(call) -> None:
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=call.message.text)
    if call.data == 'artist?q=' or call.data == 'track?q=':
        bot.send_chat_action(call.from_user.id, 'typing')
        if call.data == 'artist?q=':
            msg = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º/–≥—Ä—É–ø–ø—É')
        else:
            msg = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞')
        bot.register_next_step_handler(msg, get_song, call.data)
    elif call.data == 'Kharkov' or call.data == 'Poltava':
        res = requests.get(API['API_Weather'].format(call.data)).json()
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + tr_w(call.data))
        bot.send_message(call.from_user.id, f"–ì–æ—Ä–æ–¥: {tr_w(call.data).title()}üè¢\n"
                                            f"–ü–æ–≥–æ–¥–∞: {tr_w(res['weather'][0]['description']).title()}‚òÄÔ∏è\n"
                                            f"–¢–µ—Å–ø–µ—Ä–∞—Ç—É—Ä–∞: {(res['main']['temp'])}¬∞Cüå°\n"
                                            f"–ü–æ –æ—â—É—à–µ–Ω–∏—é: {(res['main']['feels_like'])}¬∞Cüå°\n"
                                            f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {res['main']['pressure']} –¥–∏–Ω¬∑—Å–º¬≤‚è≤\n"
                                            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {res['main']['humidity']} %üíß\n"
                                            f"–í–µ—Ç–µ—Ä: {res['wind']['speed']} –º\\—Åüí®\n",
                         reply_markup=ReplyKeyboardRemove(selective=True))


def get_song(message: Message, data: str) -> None:
    log(message, 'info')
    res = requests.get(API['API_Deezer'] + data + message.text.replace(' ', '+')).json()
    if data == 'artist?q=':
        bot.send_photo(message.chat.id, res['data'][0]['picture_xl'])
        songs = requests.get(res['data'][0]['tracklist'].replace('50', '10')).json()
        print(songs.json())
        # for i, y in songs['data'][0].values():
        #     print(i, ' ', y, '/n')
    # print(res)preview


def trans_word(message: Message) -> None:
    log(message, 'info')
    bot.send_message(message.chat.id, tr_w(message.text))


bot.polling(none_stop=True)
time.sleep(100)
