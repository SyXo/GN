#!/home/UltraXionUA/.virtualenvs/myvirtualenv/bin/python3.8
# -*- coding: utf-8 -*-
"""Mains file for GNBot"""
# <<< Import's >>>
from telebot.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, LabeledPrice
from telebot.types import PreCheckoutQuery, ShippingQuery, InputMediaVideo
from funcs import tr_w, rend_d, hi_r, log, clear_link, get_day, get_weather_emoji, sec_to_time
from pars import main, get_torrents1, get_torrents2, get_torrents3, get_instagram_video, get_instagram_photos
from config import TOKEN, API, Empty_bg, PAYMENT_TOKEN, URLS
from youtube_unlimited_search import YoutubeUnlimitedSearch
from pytube import YouTube, exceptions
from collections import defaultdict
from datetime import datetime as dt
from pytils.translit import slugify
from urllib import parse, request, error
from json import JSONDecodeError
from threading import Thread
from telebot import TeleBot
from threading import Timer
import requests
import ffmpeg
import random
import time
import db
import os
import re

# <<< End import's>>
# from config import TEST_TOKEN
bot = TeleBot(TOKEN)
log('Bot is successful running!', 'info')

# Turn on parser
Parser = Thread(target=main, name='Parser')
Parser.start()


# <<< Start >>>
@bot.message_handler(commands=['start'])  # /start
def start_handler(message: Message) -> None:
    log(message, 'info')
    db.add_user(message.from_user)
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–µ–Ω—è –∑–æ–≤—É—Ç GNBotüñ•\n'
                                      '–Ø —Å–æ–∑–¥–∞–Ω –¥–∞–±—ã —Å–ª—É–∂–∏—Ç—å –≤–µ—Ä–æ–π –∏ –ø—Ä–∞–≤–¥–æ–π —Å–æ–æ–±—â–µ—Å—Ç–≤—É üíé–ì–æ–ª—É–±–æ–π –Ω–æ—Å–æ–∫üíé')


# <<< End start >>>


# <<< Help >>>
@bot.message_handler(commands=['help'])  # /help
def help_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, '–¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –ø–æ–º–æ—â—åüÜò, –Ω–æ –µ—ë —Ç—É—Ç –Ω–µ –±—É–¥–µ—Çüåö\n'
                                      '–ï—Å–ª–∏ —á—Ç–æ –ø–∏—à–∏ –º–Ω–µ: üí¢@Ultra_Xionüí¢')


# <<< End help >>>


# <<< Gif >>>
@bot.message_handler(commands=['gif'])  # /gif
def gif_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'upload_video')
    while True:
        data = requests.get(API['API_Gif']).json()
        if hi_r(data['data']['rating']):
            bot.send_document(message.chat.id, data['data']['images']['downsized_large']['url'])
            break


# <<< End gif >>>


# <<< Donate >>>
@bot.message_handler(commands=['donate'])  # /donate
def donate_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –¥–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é '
                                          '–Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω—Ü–∏–æ–Ω–∞–ª–∞ –≤ <b>GNBot</b>\n'
                                          'C —É–≤–∞–∂–µ–Ω–∏–µ–º <i>@Ultra_Xion</i>', parse_mode='HTML')
        if PAYMENT_TOKEN.split(':')[1] == 'LIVE':
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton('1 –≥—Ä–Ω', callback_data='1 UAH'),
                         InlineKeyboardButton('10 –≥—Ä–Ω', callback_data='10 UAH'),
                         InlineKeyboardButton('100 –≥—Ä–Ω', callback_data='100 UAH'),
                         InlineKeyboardButton('1000 –≥—Ä–Ω', callback_data='1000 UAH'),
                         InlineKeyboardButton('–°–≤–æ—è —Å—É–º–º–∞', callback_data='–°–≤–æ—è —Å—É–º–º–∞'))
            msg = bot.send_message(message.chat.id, '–°—É–º–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏üí∏', reply_markup=keyboard)
            time.sleep(20)
            bot.delete_message(msg.chat.id, msg.message_id)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –≤ –≥—Ä—É–ø–ø–µ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞üòî\n'
                                          '–ß—Ç–æ –±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª–∑–æ–≤–∞—Ç—å—Å—è'
                                          '—ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º üí¢@GNTMBotüí¢')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^\d+\sUAH$', call.data) or call.data == '–°–≤–æ—è —Å—É–º–º–∞')
def donate_query(call):
    bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + call.data)
    bot.edit_message_text(call.message.text, call.message.chat.id, call.message.message_id)
    if call.data == '–°–≤–æ—è —Å—É–º–º–∞':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—Éüßê')
        bot.register_next_step_handler(msg, send_payment, 'UAH')
    else:
        send_payment(call.message, call.data)


def send_payment(message: Message, money) -> None:
    if money == 'UAH' and message.text.isdigit():
        local_money = message.text + ' ' + money
    else:
        local_money = money
    price = LabeledPrice('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', amount=int(local_money.split()[0]) * 100)
    bot.send_invoice(message.chat.id, title='–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                     description='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ GNBot',
                     provider_token=PAYMENT_TOKEN, currency='uah',
                     photo_url=URLS['logo'],
                     photo_height=1494, photo_width=1295, photo_size=142,
                     is_flexible=False, prices=[price],
                     start_parameter='donate-programmer-gnbot',
                     invoice_payload='donate-is-done')


@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query: ShippingQuery):
    bot.answer_shipping_query(shipping_query.id, ok=True,
                              error_message='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî\n!'
                                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —á—É—Ç—å –ø–æ–∑–∂–µ')


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                    error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòî\n"
                                                  "–£–¥–µ–±–∏—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã–µ "
                                                  "–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç")


@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message: Message) -> None:
    promo = message.successful_payment
    log(f'Successful_payment\nType: {promo.invoice_payload}\nSum: {promo.total_amount}{promo.currency}')
    bot.send_message(message.chat.id, f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æüòå\n'
                                      f'{message.successful_payment.total_amount // 100} '
                                      f'{message.successful_payment.currency} –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å–≤–µ—Ç\n'
                                      f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ü•≥')


# <<< End donate >>>


# <<< QR Code >>>
qr_msg = defaultdict(Message)


@bot.message_handler(commands=['qrcode'])  # /qrcode
def qrcode_handler(message: Message) -> None:
    log(message, 'info')
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å', callback_data='Create_QRCode'),
                 InlineKeyboardButton('–°—á–∏—Ç–∞—Ç—å', callback_data='Read_QRCode'))
    qr_msg[message.chat.id] = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—éüßê', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^Create_QRCode$', call.data))
def create_sqcode(call) -> None:
    global qr_msg
    bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–∑–¥–∞—Ç—å')
    bot.delete_message(qr_msg[call.message.chat.id].chat.id, qr_msg[call.message.chat.id].message_id)
    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ URL‚úíÔ∏è')
    bot.register_next_step_handler(msg, send_qrcode)


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^Read_QRCode$', call.data))
def read_sqcode(call) -> None:
    bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—á–∏—Ç–∞—Ç—å')
    bot.delete_message(qr_msg[call.message.chat.id].chat.id, qr_msg[call.message.chat.id].message_id)
    msg = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ QR Code –∏–ª–∏ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüì∏')
    bot.register_next_step_handler(msg, read_text)


def read_text(message: Message) -> None:
    if message.content_type == 'photo':
        res = requests.post(API['QRCode']['Read'].replace('FILE', bot.get_file_url(message.photo[0].file_id))).json()
        if res[0]['symbol'][0]['data'] is not None:
            bot.send_message(message.chat.id, '<b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>üìù\n' + res[0]['symbol'][0]['data'],
                             parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, 'QR Code –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ωüòî')
    else:
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Öüòî')


def send_qrcode(message: Message) -> None:
    bot.send_photo(message.chat.id, requests.get(API['QRCode']['Create'].replace('DATA',
                                                                                 message.text.replace(' ',
                                                                                                      '+'))).content)
# <<< End QR Code >>>


# <<< Joke >>>
jokes_data = defaultdict(list)


@bot.message_handler(commands=['joke'])  # /joke
def joke_handler(message: Message) -> None:
    global jokes_data
    log(message, 'info')
    if message.chat.id not in jokes_data or len(jokes_data[message.chat.id]) == 1:
        jokes_data[message.chat.id] = db.get_all_jokes()
    joke = jokes_data[message.chat.id].pop(random.choice(range(len(jokes_data[message.chat.id]) - 1)))
    print(len(jokes_data[message.chat.id]))
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1.5)
    if joke['panchline'] != 'False':
        bot.send_message(message.chat.id, joke['setup'] + random.choice(['üßê', 'üòÖ', 'ü§´']))
        time.sleep(3.5)
        bot.send_message(message.chat.id, joke['panchline'] + random.choice(['üåö', 'üòÖ', 'ü§´']))
    else:
        bot.send_message(message.chat.id, joke['setup'] + 'üåö')


# <<< End joke >>>


# <<< Ru meme >>>
@bot.message_handler(commands=['ru_meme'])  # /ru_meme
def meme_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.send_photo(message.chat.id, db.random_meme())


# <<< End ru meme >>>


# <<< En meme >>>
@bot.message_handler(commands=['en_meme'])  # /en_meme
def meme_en_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'upload_photo')
    meme = requests.get(API['API_Meme']).json()
    bot.send_photo(message.chat.id, meme['url'])


# <<< End en meme >>>


# <<< Weather >>>
weather_data = defaultdict(dict)
weather_msg = defaultdict(Message)
city_data = defaultdict(dict)
city_msg = defaultdict(Message)


@bot.message_handler(commands=['weather'])  # /weather
def weather_handler(message: Message) -> None:
    log(message, 'info')
    city_msg[message.chat.id] = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞‚úíÔ∏è')
    bot.register_next_step_handler(city_msg[message.chat.id], show_weather)


def weather(message: Message, index: int) -> None:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="‚¨ÖÔ∏èÔ∏è", callback_data=f"move_to__ {index - 1 if index > 0 else 'pass'}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"move_to__ "
                                        f"{index + 1 if index < len(weather_data[message.chat.id]) - 1 else 'pass'}"))
    keyboard.add(InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', url='https://' +
                                                    f'darksky.net/forecast/{city_data[message.chat.id]["lat"]},'
                                                    f'{city_data[message.chat.id]["lon"]}/us12/en'))
    try:
        bot.edit_message_text(chat_id=weather_msg[message.chat.id].chat.id,
                              message_id=weather_msg[message.chat.id].message_id,
                              text=f"<i>{weather_data[message.chat.id][index]['valid_date']} "
                                   f"{get_day(weather_data[message.chat.id][index]['valid_date'])}</i>\n"
                                   f"<b>–ì–æ—Ä–æ–¥ {tr_w(city_data[message.chat.id]['city_name'])} "
                                   f"{city_data[message.chat.id]['country_code']}</b>üè¢\n\n"
                                   f"<b>–ü–æ–≥–æ–¥–∞</b> {weather_data[message.chat.id][index]['weather']['description']}Ô∏è"
                                   f"{get_weather_emoji(str(weather_data[message.chat.id][index]['weather']['code']))}"
                                   f"\n<b>–¢–µ—Å–ø–µ—Ä–∞—Ç—É—Ä–∞</b> {weather_data[message.chat.id][index]['low_temp']} - "
                                   f"{weather_data[message.chat.id][index]['max_temp']}¬∞Cüå°\n"
                                   f"<b>–ü–æ –æ—â—É—à–µ–Ω–∏—é</b> {weather_data[message.chat.id][index]['app_min_temp']} - "
                                   f"{weather_data[message.chat.id][index]['app_max_temp']}¬∞Cüå°\n"
                                   f"<b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å</b> {weather_data[message.chat.id][index]['clouds']}%‚òÅÔ∏è\n"
                                   f"<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤</b> {weather_data[message.chat.id][index]['pop']}%‚òîÔ∏èÔ∏è\n"
                                   f"<b>–í–∏–¥–∏–º–æ—Å—Ç—å</b> {weather_data[message.chat.id][index]['vis']} –∫–ºüî≠\n"
                                   f"<b>–í–ª–∞–∂–Ω–æ—Å—Ç—å</b> {weather_data[message.chat.id][index]['rh']} %üíß\n"
                                   f"<b>–ê—Ç–º–æc. –¥–∞–≤–ª–µ–Ω–∏–µ</b> "
                                   f"{weather_data[message.chat.id][index]['pres']} –¥–∏–Ω¬∑—Å–º¬≤‚è≤\n"
                                   f"<b>–í–µ—Ç–µ—Ä</b> {weather_data[message.chat.id][index]['wind_cdir_full']} üß≠\n"
                                   f"<b>C–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞</b> "
                                   f"{float('{:.1f}'.format(weather_data[message.chat.id][index]['wind_spd']))}"
                                   f" –º\\—Åüí®\n",
                              reply_markup=keyboard, parse_mode='HTML')
    except KeyError:
        log('Key Error in weather', 'warning')
        bot.send_chat_action(message.chat.id, '‚õîÔ∏è')


def show_weather(message: Message) -> None:
    global weather_msg, city_data, weather_data, city_msg
    bot.delete_message(city_msg[message.chat.id].chat.id, city_msg[message.chat.id].message_id)
    if message.text.lower() == '—Ö–∞—Ä—å–∫–æ–≤':
        city_name = 'K' + slugify(message.text)
    else:
        city_name = slugify(message.text).title()
    try:
        res = requests.get(API['API_Weather'].replace('CityName', city_name)).json()
    except JSONDecodeError:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –≥–æ—Ä–æ–¥üòî')
    else:
        if message.chat.id in weather_msg:
            bot.delete_message(weather_msg[message.chat.id].chat.id, weather_msg[message.chat.id].message_id)
        city_data[message.chat.id] = {'city_name': res['city_name'], 'country_code': res['country_code'],
                                      'lat': res['lat'], 'lon': res['lon']}
        weather_data[message.chat.id] = res['data']
        weather_msg[message.chat.id] = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
        weather(message, 0)


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^move_to__\s\d+$', call.data))
def weather_query(call):
    global weather_data
    if 0 < int(call.data.split()[1]) < len(weather_data[call.message.chat.id]):
        bot.answer_callback_query(call.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä.{str(int(call.data.split()[1]) + 1)}')
        weather(call.message, int(call.data.split()[1]))
    else:
        bot.answer_callback_query(call.id, '‚õîÔ∏è')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^move_to__\spass$', call.data))
def pass_query(call):
    bot.answer_callback_query(call.id, '‚õîÔ∏è')


# <<< End weather >>>


# <<< Detect music >>>
detect_msg = defaultdict(Message)


@bot.message_handler(commands=['detect'])  # /detect_music
def detect_handler(message: Message) -> None:
    global detect_msg
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—åüîä', callback_data='record'),
                 InlineKeyboardButton('–ù–∞–ø–µ—Ç—åüéô', callback_data='sing'))
    detect_msg[message.chat.id] = bot.send_message(message.chat.id,
                                                   '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—åüßê', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'record' or call.data == 'sing')
def callback_query(call):
    bot.delete_message(detect_msg[call.message.chat.id].chat.id, detect_msg[call.message.chat.id].message_id)
    if call.data == 'record':
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + '–ó–∞–ø–∏—Å–∞—Ç—å')
    else:
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + '–ù–∞–ø–µ—Ç—å')
    msg = bot.send_message(call.message.chat.id, '–ó–∞–ø–∏—à–∏—Ç–µ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—åüé§')
    bot.register_next_step_handler(msg, detect_music, call.data)


def detect_music(message: Message, type_r) -> None:
    API['AUDD_data']['url'] = bot.get_file_url(message.voice.file_id).replace('https://' + 'api.telegram.org',
                                                                              'http://' + 'esc-ru.appspot.com/') \
                                                                               + '?host=api.telegram.org'
    if type_r == 'sing':
        result = requests.post(API['AUDD'] + 'recognizeWithOffset/',
                               data={'url': API['AUDD_data']['url'], 'api_token': API['AUDD_data']['api_token']}).json()
    else:
        result = requests.post(API['AUDD'], data=API['AUDD_data']).json()
    if result['status'] == 'success' and result['result'] is not None:
        if type_r != 'sing':
            if result['result']['deezer']:
                keyboard = InlineKeyboardMarkup()
                res = YoutubeUnlimitedSearch(f"{result['result']['artist']} - {result['result']['title']}",
                                             max_results=1).get()
                keyboard.add(InlineKeyboardButton('–¢–µ–∫—Å—Ç',
                                                  callback_data=f"Lyric2: {str(result['result']['deezer']['id'])}"),
                             InlineKeyboardButton('Dezeer', url=result['result']['deezer']['link']))
                keyboard.add(InlineKeyboardButton('–ü–µ—Å–Ω—è', callback_data=res[0]['link']))
                bot.send_photo(message.chat.id, result['result']['deezer']['artist']['picture_xl'],
                               caption=f"{result['result']['artist']} - {result['result']['title']}üéµ",
                               reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, f"<b>{result['result']['artist']}</b>"
                                                  f" - {result['result']['title']}üéµ", parse_mode='HTML')
        else:
            msg = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b> "
            for i in result['result']['list']:
                msg += f"\n–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: <i>{i['score']}%</i>\n{i['artist']} - {i['title']}üéµ"
            bot.send_message(message.chat.id, msg, parse_mode='HTML')

        @bot.callback_query_handler(func=lambda call: re.fullmatch(r'^Lyric2:\s?\d+$', call.data))
        def call_lyric(call):
            res_lyric = requests.get(API['AUDD'] + 'findLyrics/?q=' + result['result']['artist'] + ' ' +
                                     result['result']['title']).json()
            bot.reply_to(call.message, res_lyric['result'][0]['lyrics'])
    else:
        bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—åüòî')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'/watch\?v=\w+.+', call.data))
def callback_query(call):
    yt = YouTube('https://' + 'www.youtube.com/' + call.data.split()[0])
    bot.send_chat_action(call.message.chat.id, 'upload_audio')
    bot.send_audio(call.message.chat.id,
                   open(yt.streams.filter(only_audio=True)[0].download(filename='file'), 'rb'),
                   title=yt.title, duration=yt.length, performer=yt.author,
                   caption=f'üéß {sec_to_time(yt.length)} '
                           f'| {round(os.path.getsize("file.mp4") / 1000000, 1)} MB |'
                           f' {yt.streams.filter(only_audio=True)[0].abr.replace("kbps", "")} Kbps')
    try:
        os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'file' + '.mp4'))
    except FileNotFoundError:
        log('Error! Can\'t remove file', 'warning')
# <<< End detect music >>>


# <<< Music >>>
data_songs = defaultdict(list)
song_msg = defaultdict(Message)
msg_song = defaultdict(Message)


@bot.message_handler(commands=['music'])  # /music
def music_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton('–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—éüé§', callback_data='artist?q='),
                 InlineKeyboardButton('–ü–æ —Ç—Ä–µ–∫—Éüéº', callback_data='track?q='))
    msg_song[message.chat.id] = bot.send_message(message.chat.id, '–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É?üéß', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'artist?q=' or call.data == 'track?q=')
def callback_query(call):
    bot.delete_message(msg_song[call.message.chat.id].chat.id, msg_song[call.message.chat.id].message_id)
    if call.data == 'artist?q=':
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É')
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—èüë§')
    else:
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ç—Ä–µ–∫—É')
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞üñä')
    bot.register_next_step_handler(msg, get_song, call.data)


def get_song(message: Message, choice: str) -> None:  # Get song
    global data_songs, song_msg
    res = requests.get(API['API_Deezer'] + choice + message.text.replace(' ', '+')).json()
    try:
        if res['data']:
            if choice == 'artist?q=':
                songs = requests.get(res['data'][0]['tracklist'].replace('limit=50', 'limit=100')).json()
                if songs['data']:
                    data_songs[message.chat.id] = [
                        {'id': i['id'], 'title': i['title'], 'name': i['contributors'][0]['name'],
                         'link': i['link'], 'preview': i['preview'], 'duration': i['duration']}
                        for i in songs['data']]
                    create_data_song(message)
                    if data_songs[message.chat.id]:
                        if message.chat.id in song_msg:
                            bot.delete_message(song_msg[message.chat.id].chat.id, song_msg[message.chat.id].message_id)
                        song_msg[message.chat.id] = bot.send_photo(message.chat.id, res['data'][0]['picture_xl'],
                                                                   reply_markup=inline_keyboard(message, 0))
                    else:
                        raise FileExistsError
            elif choice == 'track?q=':
                data_songs[message.chat.id] = [{'id': i['id'], 'title': i['title'], 'name': i['artist']['name'],
                                                'link': i['link'], 'preview': i['preview'], 'duration': i['duration']}
                                               for i in res['data']]
                create_data_song(message)
                if data_songs[message.chat.id]:
                    if message.chat.id in song_msg:
                        bot.delete_message(song_msg[message.chat.id].chat.id, song_msg[message.chat.id].message_id)
                    song_msg[message.chat.id] = bot.send_message(message.chat.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞üîé',
                                                                 reply_markup=inline_keyboard(message, 0))
                else:
                    raise FileExistsError
            else:
                raise FileExistsError
        else:
            raise FileExistsError
    except FileExistsError:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–µ–ª–µ–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—åüòî')


def create_data_song(message: Message) -> None:
    global data_songs
    list_music, buf = [], []
    for i, en in enumerate(data_songs[message.chat.id], 1):
        buf.append(en)
        if i % 5 == 0:
            list_music.append(buf.copy())
            buf.clear()
    if buf:
        list_music.append(buf.copy())
    data_songs[message.chat.id] = list_music.copy()


def inline_keyboard(message: Message, some_index) -> InlineKeyboardMarkup:  # Navigation for music
    global data_songs
    some_keyboard = InlineKeyboardMarkup()
    try:
        for songs in data_songs[message.chat.id][some_index]:
            some_keyboard.add(InlineKeyboardButton(f"{songs['name']} - {songs['title']}",
                                                   callback_data=f"ID: {songs['id']}"))
        some_keyboard.add(
            InlineKeyboardButton(text="‚¨ÖÔ∏èÔ∏è",
                                 callback_data=f"move_to {some_index - 1 if some_index > 0 else 'pass'}"),
            InlineKeyboardButton(text="‚û°Ô∏è",
                                 callback_data=f"move_to "
                                 f"{some_index + 1 if some_index < len(data_songs[message.chat.id]) - 1 else 'pass'}"))
        return some_keyboard
    except KeyError:
        log('Key Error in music', 'warning')


@bot.callback_query_handler(func=lambda call: call.data == 'move_to pass')
def callback_query(call):
    bot.answer_callback_query(call.id, '‚õîÔ∏è')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^move_to\s\d$', call.data))
def callback_query(call):
    global data_songs
    if 0 < int(call.data.split()[1]) < len(data_songs[call.message.chat.id]):
        bot.answer_callback_query(call.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä.{str(int(call.data.split()[1]) + 1)}')
        if call.message.content_type == 'photo':
            bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                   media=InputMediaPhoto(call.message.photo[-1].file_id),
                                   reply_markup=inline_keyboard(call.message, int(call.data.split()[1])))
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=call.message.text,
                                  reply_markup=inline_keyboard(call.message, int(call.data.split()[1])))
    else:
        bot.answer_callback_query(call.id, '‚õîÔ∏è')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^ID:\s?\d+$', call.data))
def callback_query(call):
    song_id = call.data.replace('ID: ', '')
    global data_songs
    for i in data_songs[call.message.chat.id]:
        for j in i:
            if j['id'] == int(song_id):
                bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + j["name"] + ' - ' + j["title"])
                res = YoutubeUnlimitedSearch(f'{j["name"]} - {j["title"]}', max_results=1).get()
                yt = YouTube('https://' + 'www.youtube.com/' + res[0]['link'])
                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(InlineKeyboardButton('–¢–µ–∫—Å—Ç', callback_data=f'Lyric: {str(song_id)}'),
                             InlineKeyboardButton('Dezeer', url=j['link']))
                bot.send_chat_action(call.message.chat.id, 'upload_audio')
                bot.send_audio(call.message.chat.id, audio=open(yt.streams.filter(
                                                     only_audio=True)[0].download(filename='file'), 'rb'),
                                                     reply_markup=keyboard,  performer=j['name'],
                                                     title=j['title'], duration=j['duration'],
                                                     caption=f'üéß {sec_to_time(yt.length)} '
                                             f'| {round(os.path.getsize("file.mp4")/1000000, 1)} MB |'
                                             f' {yt.streams.filter(only_audio=True)[0].abr.replace("kbps", "")} Kbps')
                try:
                    os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'file' + '.mp4'))
                except FileNotFoundError:
                    log('Error! Can\'t remove file', 'warning')
                break


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^Lyric:\s?\d+$', call.data))
def callback_query(call):
    global data_songs
    song_id = call.data.replace('Lyric: ', '')
    for i in data_songs[call.message.chat.id]:
        for j in i:
            if j['id'] == int(song_id):
                res = requests.get(API['AUDD'] + 'findLyrics/?q=' + j['name'] + ' ' + j['title']).json()
                if res['status'] == 'success' and res['result'] is not None:
                    bot.reply_to(call.message, res['result'][0]['lyrics'])


# <<< End music >>>


# <<< News >>>
news = defaultdict(list)
news_msg = defaultdict(Message)


@bot.message_handler(commands=['news'])  # /news
def news_handler(message: Message) -> None:
    log(message, 'info')
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(InlineKeyboardButton('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='News technology'),
                 InlineKeyboardButton('–ù–∞—É–∫–∞', callback_data='News science'))
    keyboard.add(InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ', callback_data='News health'),
                 InlineKeyboardButton('–û–±—â–∏–µ', callback_data='News general'))
    keyboard.add(InlineKeyboardButton('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', callback_data='News entertainment'),
                 InlineKeyboardButton('–°–ø–æ—Ä—Ç', callback_data='News sports'))
    bot.send_message(message.chat.id, '<b>–ü–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>', reply_markup=keyboard, parse_mode='HTML')


def main_news(message: Message, news_type: str) -> None:
    global news
    global news_msg
    res = requests.get(API['News']['URL'].replace('Method', f'{news_type}') + API['News']['Api_Key']).json()
    if res['status'] == 'ok':
        news[message.chat.id] = [{'title': i['title'], 'description': i['description'],
                                  'url': i['url'], 'image': i['urlToImage'], 'published': i['publishedAt']} for i in
                                 res['articles']]
    for i in news[message.chat.id]:
        if i['image'] is not None:
            i['title'] = clear_link(i['title'])
            if i['description'] is not None:
                i['description'] = clear_link(i['description'])
    send_news(message, 0)


def send_news(message: Message, index: int) -> None:
    keyboard2 = InlineKeyboardMarkup()
    keyboard2.add(InlineKeyboardButton('–ß–∏—Ç–∞—Ç—å', url=news[message.chat.id][index]['url']))
    keyboard2.add(
        InlineKeyboardButton(text="‚¨ÖÔ∏èÔ∏è",
                             callback_data=f"move_to_ {index - 1 if index > 0 else 'pass'}"),
        InlineKeyboardButton(text="‚û°Ô∏è",
                             callback_data=f"move_to_ "
                                           f"{index + 1 if index < len(news[message.chat.id]) - 1 else 'pass'}"))
    try:
        if news[message.chat.id][index]['image'] is not None and news[message.chat.id][index]['image'] != '':
            if news[message.chat.id][index]['description'] is not None:
                bot.edit_message_media(chat_id=news_msg[message.chat.id].chat.id,
                                       message_id=news_msg[message.chat.id].message_id,
                                       media=InputMediaPhoto(news[message.chat.id][index]['image'],
                                                             caption='<b>' + news[message.chat.id][index][
                                                                 'title'] + '</b>\n\n' +
                                                                     news[message.chat.id][index]['description'] +
                                                                     '\n\n' + '<i>' + news[message.chat.id][index][
                                                                         'published'].replace('T', ' ').replace(
                                                                 'Z', '') + '</i>',
                                                             parse_mode='HTML'),
                                       reply_markup=keyboard2)
            else:
                bot.edit_message_media(chat_id=news_msg[message.chat.id].chat.id,
                                       message_id=news_msg[message.chat.id].message_id,
                                       media=InputMediaPhoto(news[message.chat.id][index]['image'],
                                                             caption='<b>' + news[message.chat.id][index][
                                                                 'title'] + '</b>\n' +
                                                                     '<i>' + news[message.chat.id][index][
                                                                         'published'].replace('T', ' ').replace(
                                                                 'Z', '') + '</i>',
                                                             parse_mode='HTML'),
                                       reply_markup=keyboard2)
        else:
            send_news(message, index + 1)
    except KeyError:
        log('Key Error in news', 'warning')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^News\s?\w+$', call.data))
def choice_news_query(call):
    global news_msg
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.message.chat.id in news_msg:
        bot.delete_message(news_msg[call.message.chat.id].chat.id, news_msg[call.message.chat.id].message_id)
    news_msg[call.message.chat.id] = bot.send_photo(call.message.chat.id, Empty_bg)
    main_news(call.message, call.data.split()[1])


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^move_to_\s?\d+$', call.data))
def next_news_query(call):
    global news
    if 0 < int(call.data.split()[1]) < len(news[call.message.chat.id]):
        bot.answer_callback_query(call.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä.{str(int(call.data.split()[1]) + 1)}')
        send_news(call.message, int(call.data.split()[1]))
    else:
        bot.answer_callback_query(call.id, '‚õîÔ∏è')


@bot.callback_query_handler(func=lambda call: call.data == 'move_to_ pass')
def news_pass(call):
    bot.answer_callback_query(call.id, '‚õîÔ∏è')


# <<< End news >>>


# <<< YouTube >>>
@bot.message_handler(commands=['youtube'])  # /youtube
def youtube_music_handler(message: Message) -> None:
    log(message, 'info')
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–í–∏–¥–µ–æüì∫', callback_data='Video'),
                 InlineKeyboardButton('–ê—É–¥–∏–æüéß', callback_data='Audio'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—åüßê', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'Audio' or call.data == 'Video')
def youtube_pass(call):
    bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + tr_w(call.data))
    bot.delete_message(call.message.chat.id, call.message.message_id)
    link = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æüîó')
    bot.register_next_step_handler(link, send_audio, call.data)


def send_audio(message: Message, method: str) -> None:
    if re.fullmatch(r'^https?://.*[\r\n]*$', message.text):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('YouTube', url=message.text))
        try:
            yt = YouTube(message.text)
        except error.HTTPError:
            bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ªüòî')
        except exceptions.RegexMatchError:
            bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏üòî')
        else:
            if method == 'Audio':
                bot.send_chat_action(message.chat.id, 'upload_audio')
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_audio(message.chat.id, open(yt.streams.filter(only_audio=True)[0].download(
                               filename='file'), 'rb'),
                               reply_markup=keyboard, duration=yt.length, title=yt.title, performer=yt.author,
                               caption=f'üéß {sec_to_time(yt.length)} '
                                       f'| {round(os.path.getsize("file.mp4") / 1000000, 1)} MB |'
                                       f' {yt.streams.filter(only_audio=True)[0].abr.replace("kbps", "")} Kbps')
                try:
                    os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'file' + '.mp4'))
                except FileNotFoundError:
                    log('Error! Can\'t remove file', 'warning')
            else:
                resolution = None
                try:
                    resolution = '480p'
                    yt.streams.filter(res="480p").order_by('resolution').desc()[0].download(
                        filename='video')
                except IndexError:
                    try:
                        resolution = '320p'
                        yt.streams.filter(res="320p").order_by('resolution').desc()[0].download(
                            filename='video')
                    except IndexError:
                        try:
                            resolution = '240p'
                            yt.streams.filter(res="240p").order_by('resolution').desc()[0].download(
                                filename='video')
                        except IndexError:
                            try:
                                resolution = '144p'
                                yt.streams.filter(res="144p").order_by('resolution').desc()[0].download(
                                    filename='video')
                            except IndexError:
                                bot.send_message(message.chat.id, '–î–∞–Ω–æ–µ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç —Å–ª–∏–≥–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º,'
                                                                  ' –º–æ–π –ª–∏–º–∏—Ç 50–ú–ëüòî')
                yt.streams.filter(only_audio=True)[0].download(filename='audio')
                ffmpeg_work = Thread(target=ffmpeg_run, name='ffmpeg_work')
                msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
                ffmpeg_work.start()
                ffmpeg_work.join()
                time.sleep(5)
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(msg.chat.id, msg.message_id)
                bot.send_video(message.chat.id, open('file.mp4', 'rb'),
                               duration=yt.length, reply_markup=keyboard,
                               caption=f'üéß {sec_to_time(yt.length)} '
                                       f'| {round(os.path.getsize("file.mp4") / 1000000, 1)} MB '
                                       f'| {yt.streams.filter(only_audio=True)[0].abr.replace("kbps", "")} Kbps '
                                       f'| {resolution}')
                try:
                    files = os.listdir(os.path.dirname(__file__))
                    for i in files:
                        if i.startswith('video'):
                            os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), i))
                        elif i.startswith('audio'):
                            os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), i))
                        elif i.startswith('file'):
                            os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), i))
                except FileNotFoundError:
                    log('Error! Can\'t remove file', 'warning')
    else:
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Öüòî')


def ffmpeg_run():
    files = os.listdir(os.path.dirname(__file__))
    input_audio, input_video = None, None
    for i in files:
        if i.startswith('audio'):
            input_audio = ffmpeg.input(i)
        elif i.startswith('video'):
            input_video = ffmpeg.input(i)
    input_video = ffmpeg.filter(input_video, 'fps', fps=25, round='up')
    ffmpeg.output(input_video, input_audio, "file.mp4", preset='faster',
                  vcodec='libx264', acodec='mp3', **{'qscale:v': 10}).run(overwrite_output=True)
# <<< End YouTube >>>


# <<< Instagram >>>
msg_instagram = defaultdict(Message)


@bot.message_handler(commands=['instagram'])  # /instagram
def instagram_handler(message: Message) -> None:
    log(message, 'info')
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–§–æ—Ç–æüì∑', callback_data='Instagram photo'),
                 InlineKeyboardButton('–í–∏–¥–µ–æüìπ', callback_data='Instagram video'))
    msg_instagram[message.chat.id] = bot.send_message(message.chat.id, '<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å</b>',
                                                      parse_mode='HTML', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'Instagram\s\w+', call.data))
def callback_query(call):
    bot.delete_message(msg_instagram[call.message.chat.id].chat.id, msg_instagram[call.message.chat.id].message_id)
    msg = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É‚úíÔ∏è')
    if call.data.split()[1] == 'video':
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∏–¥–µ–æ')
        bot.register_next_step_handler(msg, get_video)
    else:
        bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ç–æ')
        bot.register_next_step_handler(msg, get_instagram_photo)


def get_video(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_video')
    bot.delete_message(message.chat.id, message.message_id)
    if re.fullmatch('^https?://www.instagram.com/.+', message.text):
        url = re.search('^https?://www.instagram.com/p/.+/', message.text).group(0)
        data = get_instagram_video(url)
        if data:
            if len(data) == 1:
                if data[0]['is_video'] is True:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton('Instagram', url=url))
                    bot.send_video(message.chat.id, data[0]['url'], reply_markup=keyboard)
                else:
                    bot.send_message(message.chat.id, '–ü–æ —Å—Å—ã–ª–∫–µ –Ω–µ—Ç –≤–∏–¥–µ–æüòî')
            else:
                list_data = []
                for i in data:
                    if i['is_video'] is True:
                        list_data.append(InputMediaVideo(i['url']))
                    else:
                        list_data.append(InputMediaPhoto(i['url']))
                bot.send_media_group(message.chat.id, list_data)
        else:
            bot.send_message(message.chat.id, '–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æüòî')
    else:
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏üòî')


def get_instagram_photo(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.delete_message(message.chat.id, message.message_id)
    if re.fullmatch('^https?://www.instagram.com/.+', message.text):
        keyboard = InlineKeyboardMarkup()
        url = re.search('^https?://www.instagram.com/p/.+/', message.text).group(0)
        keyboard.add(InlineKeyboardButton('Instagram', url=url))
        data = get_instagram_photos(url)
        if data:
            if len(data) == 1:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton('Instagram', url=url))
                bot.send_photo(message.chat.id, data[0], reply_markup=keyboard)
            else:
                bot.send_media_group(message.chat.id, [InputMediaPhoto(photo) for photo in data])
        else:
            bot.send_message(message.chat.id, '–ü–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòî')
    else:
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏üòî')


# <<< End Instagram >>>


# <<< Torrent >>>
data_torrents = defaultdict(dict)
torrent_msg = defaultdict(Message)
search_msg = defaultdict(str)
tracker = defaultdict(str)
search = defaultdict(Message)


@bot.message_handler(commands=['torrent'])  # /torrents
def torrents_handler(message: Message) -> None:
    log(message, 'info')
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('Rutor.infoüá∑üá∫', callback_data='Rutor.info'))
    keyboard.add(InlineKeyboardButton('GTorrent.ruüá∑üá∫', callback_data='GTorrent.ru'))
    keyboard.add(InlineKeyboardButton('Gamestracker.orgüá∑üá∫', callback_data='Gamestracker.org'))
    search[message.chat.id] = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ÉÔ∏è', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'Gamestracker.org' or call.data == 'GTorrent.ru' or
                            call.data == 'Rutor.info')
def callback_query(call):
    global tracker, search
    bot.delete_message(search[call.message.chat.id].chat.id, search[call.message.chat.id].message_id)
    tracker[call.message.chat.id] = call.data
    msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å‚úíÔ∏è')
    bot.register_next_step_handler(msg, send_urls)


def send_urls(message: Message) -> None:
    global data_torrents, torrent_msg, tracker
    search_msg[message.chat.id] = message.text
    msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
    bot.send_chat_action(message.chat.id, 'typing')
    if message.chat.id in data_torrents:
        bot.delete_message(torrent_msg[message.chat.id].chat.id, torrent_msg[message.chat.id].message_id)
    if tracker[message.chat.id] == URLS['torrent']['name']:
        data_torrents[message.chat.id] = get_torrents1(message.text)
    elif tracker[message.chat.id] == URLS['torrent2']['name']:
        data_torrents[message.chat.id] = get_torrents2(message.text)
    elif tracker[message.chat.id] == URLS['torrent3']['name']:
        data_torrents[message.chat.id] = get_torrents3(message.text)
    if data_torrents[message.chat.id]:
        create_data_torrents(message)
        bot.delete_message(msg.chat.id, msg.message_id)
        torrent_msg[message.chat.id] = bot.send_message(message.chat.id, '...')
        torrent_keyboard(torrent_msg[message.chat.id], 0)
    else:
        bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å')


def create_data_torrents(message: Message) -> None:
    global data_torrents
    list_torrent, buf = [], []
    for i, en in enumerate(data_torrents[message.chat.id], 1):
        buf.append(en)
        if i % 5 == 0:
            list_torrent.append(buf.copy())
            buf.clear()
    if buf:
        list_torrent.append(buf.copy())
    data_torrents[message.chat.id] = list_torrent.copy()


def torrent_keyboard(message: Message, index: int) -> None:
    global data_torrents, torrent_msg, search_msg, tracker
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏èÔ∏è", callback_data=f"move_ {index - 1 if index > 0 else 'pass'}"),
                 InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"move_ "
                                        f"{index + 1 if index < len(data_torrents[message.chat.id]) - 1 else 'pass'}"))
    text_t = None
    if tracker[message.chat.id] == URLS['torrent']['name']:
        text_t = f'<a href="{URLS["torrent"]["main"]}">{tracker[message.chat.id]}üá∑üá∫</a>\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ <b>' \
                 f'{search_msg[message.chat.id]}</b>'
    elif tracker[message.chat.id] == URLS['torrent2']['name']:
        text_t = f'<a href="{URLS["torrent2"]["main"]}">{tracker[message.chat.id]}üá∑üá∫</a>\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ <b>' \
                 f'{search_msg[message.chat.id]}</b>'
    elif tracker[message.chat.id] == URLS['torrent3']['name']:
        text_t = f'<a href="{URLS["torrent3"]["main"]}">{tracker[message.chat.id]}üá∑üá∫</a>\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ <b>' \
                 f'{search_msg[message.chat.id]}</b>'
    try:
        for i in data_torrents[message.chat.id][index]:
            if tracker[message.chat.id] == 'GTorrent.ru':
                text_t += f'\n\n{i["name"]} | [{i["size"]}] \n[<i>/download_{i["link_t"]}</i>] ' \
                                f'[<a href="{i["link"]}">—Ä–∞–∑–¥–∞—á–∞</a>]'
            elif tracker[message.chat.id] == 'Gamestracker.org':
                link_t = i["link_t"].split('-')
                link_t = link_t[-2] + '_' + link_t[-1]
                text_t += f'\n\n{i["name"]} | {i["size"]} \n[<i>/download_{link_t}</i>] ' \
                          f'[<a href="{i["link"]}">—Ä–∞–∑–¥–∞—á–∞</a>]'
            elif tracker[message.chat.id] == 'Rutor.info':
                text_t += f'\n\n{i["name"]} | [{i["size"]}] \n[<i>/download__{i["link_t"].split("/")[-1]}</i>] ' \
                          f'[<a href="{i["link"]}">—Ä–∞–∑–¥–∞—á–∞</a>]'
    except KeyError:
        log('Key Error in torrents', 'warning')
    torrent_msg[message.chat.id] = bot.edit_message_text(chat_id=torrent_msg[message.chat.id].chat.id,
                                                         message_id=torrent_msg[message.chat.id].message_id,
                                                         text=text_t, reply_markup=keyboard, parse_mode='HTML',
                                                         disable_web_page_preview=True)


@bot.message_handler(func=lambda message: re.match(r'^/\w{8}_\d+_\d+$', str(message.text), flags=re.M))
def load_handler(message: Message):
    global data_torrents
    id_torrent = message.text.split("_")
    id_torrent = id_torrent[1] + '-' + id_torrent[2]
    for i in data_torrents[message.chat.id]:
        for j in i:
            if j['link_t'].endswith(id_torrent):
                with open(f'file{id_torrent}.torrent', 'wb') as f:
                    req = requests.get(j['link_t'], stream=True)
                    for q in req.iter_content(1024):
                        f.write(q)
                bot.send_document(message.chat.id, open(f'file{id_torrent}.torrent', 'rb'))
                try:
                    os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), f'file{id_torrent}.torrent'))
                except FileNotFoundError:
                    log('Error! Can\'t remove file', 'warning')


@bot.message_handler(func=lambda message: re.match(r'^/\w{8}__\d+$', str(message.text), flags=re.M))
def load_handler(message: Message):
    id_torrent = message.text.split("_")[-1]
    with open(f'file{id_torrent}.torrent', 'wb') as f:
        req = requests.get(URLS['torrent3']['download'] + id_torrent, stream=True)
        for i in req.iter_content(1024):
            f.write(i)
    bot.send_document(message.chat.id, open(f'file{id_torrent}.torrent', 'rb'))
    try:
        os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), f'file{id_torrent}.torrent'))
    except FileNotFoundError:
        log('Error! Can\'t remove file', 'warning')


@bot.message_handler(func=lambda message: re.match(r'^/\w{8}_\d+$', str(message.text), flags=re.M))
def load_handler(message: Message):
    id_torrent = message.text.split("_")[1]
    with open(f'file{id_torrent}.torrent', 'wb') as f:
        req = requests.get(URLS['torrent']['download'] + id_torrent, stream=True)
        for i in req.iter_content(1024):
            f.write(i)
    bot.send_document(message.chat.id, open(f'file{id_torrent}.torrent', 'rb'))
    try:
        os.remove(os.path.join(os.path.abspath(os.path.dirname(__file__)), f'file{id_torrent}.torrent'))
    except FileNotFoundError:
        log('Error! Can\'t remove file', 'warning')


@bot.callback_query_handler(func=lambda call: call.data == 'move_ pass')
def callback_query(call):
    bot.answer_callback_query(call.id, '‚õîÔ∏è')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^move_\s\d+$', call.data))
def callback_query(call):
    global data_torrents
    if 0 < int(call.data.split()[1]) < len(data_torrents[call.message.chat.id]):
        bot.answer_callback_query(call.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä.{str(int(call.data.split()[1]) + 1)}')
        torrent_keyboard(call.message, int(call.data.split()[1]))
    else:
        bot.answer_callback_query(call.id, '‚õîÔ∏è')
# <<< End torrent >>>


# <<< Translate >>>
@bot.message_handler(commands=['translate'])  # /translate
def translate_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏üëÅ‚Äçüó®')
    bot.register_next_step_handler(msg, trans_word)
    log(message, 'info')


def trans_word(message: Message) -> None:  # Translate function
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, tr_w(message.text))


# <<< End Translate >>>


# <<< Sticker GN >>>
@bot.message_handler(commands=['sticker_gn'])  # /sticker_gn
def gn_sticker_handler(message: Message) -> None:
    if db.check_user(message.from_user.id):
        log(message, 'info')
        bot.send_chat_action(message.chat.id, 'upload_photo')
        bot.send_sticker(message.chat.id, db.random_gn_sticker())
    else:
        bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞üòî')


# <<< End sticker GN >>>


# <<< Sticker >>>
@bot.message_handler(commands=['sticker'])  # /sticker
def sticker_handler(message: Message) -> None:
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'upload_photo')
    bot.send_sticker(message.chat.id, db.random_sticker())


# <<< End sticker >>>


# <<< Add new sticker >>>
@bot.message_handler(content_types=['sticker'])  # Add new sticker
def add_sticker_handler(message: Message) -> None:
    db.add_sticker(message.sticker.file_id, message.sticker.emoji, message.sticker.set_name)


# <<< End add new sticker  >>>


# <<< Change karma >>>
@bot.message_handler(content_types=['text'], regexp=r'^\++$')  # Change karma
@bot.message_handler(content_types=['text'], regexp=r'^\-+$')
def text_handler(message: Message) -> None:
    if message.reply_to_message:
        log(message, 'info')
        msg = list(message.text)
        reply_to = message.reply_to_message.from_user
        if msg[0] == '+':
            bot.send_message(message.chat.id, f'{message.from_user.username.title()} –ø–æ–¥–∫–∏–Ω—É–ª {len(msg) * 10} –∫ –∫–∞—Ä–º–µüòà '
                                              f'{reply_to.username.title()}\n–ò—Ç–æ–≥–æ –∫–∞—Ä–º–∞: '
                                              f'{db.change_karma(reply_to, msg)}')
        else:
            bot.send_message(message.chat.id, f'{message.from_user.username.title()} –æ—Ç–Ω—è–ª –æ—Ç –∫–∞—Ä–º—ã -{len(msg) * 10}üëø '
                                              f'{reply_to.username.title()}\n–ò—Ç–æ–≥–æ –∫–∞—Ä–º–∞: '
                                              f'{db.change_karma(reply_to, msg)}')


# <<< End change karma >>>


# <<< Add answer >>>
@bot.message_handler(content_types=['text'], regexp=r'^-.+$')  # Add answer to DB
def text_handler(message: Message) -> None:
    db.add_answer(message.text.replace('-', '').lstrip())
    bot.reply_to(message, random.choice(['–ü—Ä–∏–Ω—è–ª –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ', '–£—Å–ª—ã—à–∞–ª', '+', '–ó–∞–ø–æ–º–Ω–∏–ª', '–¢–≤–æ–∏ –º–æ–ª—å–±—ã —É—Å–ª—ã—à–∞–Ω—ã']))


# <<< End add answer >>>


# <<< Add answer with word >>>
@bot.message_handler(content_types=['text'], regexp=r'^\w+\s-\s\w+$')  # Add answer with word to DB
def text_handler(message: Message) -> None:
    word = re.findall(r'\w.+-', message.text)[0].replace('-', '').rstrip()
    answer = re.findall(r'-.\w.+', message.text)[0].replace('-', '').lstrip()
    db.add_to_db(word, answer)
    bot.reply_to(message, random.choice(['–ü—Ä–∏–Ω—è–ª –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ', '–£—Å–ª—ã—à–∞–ª', '+', '–ó–∞–ø–æ–º–Ω–∏–ª', '–¢–≤–æ–∏ –º–æ–ª—å–±—ã —É—Å–ª—ã—à–∞–Ω—ã']))


# <<< Code PasteBin >>>
leng_msg = 'None'


@bot.message_handler(commands=['code'])  # Send url on PasteBin
def code_handler(message: Message) -> None:
    global leng_msg
    log(message, 'info')
    bot.send_chat_action(message.chat.id, 'typing')
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(InlineKeyboardButton('Bash', callback_data='Code bash'),
                 InlineKeyboardButton('HTML 5', callback_data='Code html5'),
                 InlineKeyboardButton('CSS', callback_data='Code css'))
    keyboard.add(InlineKeyboardButton('JavaScript', callback_data='Code javascript'),
                 InlineKeyboardButton('Pascal', callback_data='Code pascal'),
                 InlineKeyboardButton('JSON', callback_data='Code json'))
    keyboard.add(InlineKeyboardButton('Perl', callback_data='Code perl'),
                 InlineKeyboardButton('C#', callback_data='Code csharp'),
                 InlineKeyboardButton('Objective C', callback_data='Code objc'))
    keyboard.add(InlineKeyboardButton('C', callback_data='Code c'),
                 InlineKeyboardButton('C++', callback_data='Code cpp'),
                 InlineKeyboardButton('Ruby', callback_data='Code ruby'))
    keyboard.add(InlineKeyboardButton('Delphi', callback_data='Code delphi'),
                 InlineKeyboardButton('Java', callback_data='Code java'),
                 InlineKeyboardButton('CoffeeScript', callback_data='Code coffeescript'))
    keyboard.add(InlineKeyboardButton('PHP', callback_data='Code php'),
                 InlineKeyboardButton('Python', callback_data='Code python'),
                 InlineKeyboardButton('PostgreSQL', callback_data='Code postgresql'))
    keyboard.add(InlineKeyboardButton('SQL', callback_data='Code sql'),
                 InlineKeyboardButton('Swift', callback_data='Code swift'),
                 InlineKeyboardButton('Rust', callback_data='Code rust'))
    keyboard.add(InlineKeyboardButton('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏', url='https://' + 'pastebin.com/languages'))
    keyboard.add(InlineKeyboardButton('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∏–∂–µ', callback_data='Enter lang'))
    leng_msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —è–∑—ã–∫üòà', reply_markup=keyboard)
    bot.register_next_step_handler(leng_msg, callback_to_code)


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^Enter lang$', call.data))
def callback_query(call):
    bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –Ω–∏–∂–µ')


def callback_to_code(message: Message) -> None:
    global leng_msg
    if type(leng_msg) == 'str':
        return
    elif type(leng_msg) == Message:
        lang: [dict, None] = db.get_code(message.text)
        if lang is not None:
            bot.delete_message(leng_msg.chat.id, leng_msg.message_id)
            bot.send_chat_action(message.chat.id, 'typing')
            time.sleep(1)
            code = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –∫–æ–¥üëæ')
            bot.register_next_step_handler(code, set_name, lang['code'])
        else:
            bot.send_message(message.chat.id, '–≠—Ç–æ—Ç —è–∑—ã–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Öüòî')


@bot.callback_query_handler(func=lambda call: re.fullmatch(r'^Code\s?\w.+$', call.data))
def code_callback_query(call):
    global leng_msg
    bot.delete_message(leng_msg.chat.id, leng_msg.message_id)
    leng_msg = call.data
    leng = call.data.replace('Code ', '')
    bot.answer_callback_query(call.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + leng)
    bot.send_chat_action(call.from_user.id, 'typing')
    time.sleep(1)
    code = bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –∫–æ–¥üëæ')
    bot.register_next_step_handler(code, set_name, leng)


def set_name(message: Message, leng: str) -> None:  # Set file name
    bot.send_chat_action(message.from_user.id, 'typing')
    time.sleep(1)
    name = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞üí°')
    bot.register_next_step_handler(name, get_url, message.text, leng)
    log(message, 'info')


def get_url(message: Message, code: str, leng: str) -> None:  # Url PasteBin
    log(message, 'info')
    values = {'api_option': 'paste', 'api_dev_key': f"{API['PasteBin']['DevApi']}",
              'api_paste_code': f'{code}', 'api_paste_private': '0',
              'api_paste_name': f'{message.text}', 'api_paste_expire_date': '1H',
              'api_paste_format': f'{leng}', 'api_user_key': f"{API['PasteBin']['UserApi']}"}
    data = parse.urlencode(values).encode('utf-8')
    req = request.Request(API['PasteBin']['URL'], data)
    with request.urlopen(req) as response:
        url_bin = str(response.read()).replace('b\'', '').replace('\'', '')
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    bot.send_message(message.chat.id, url_bin)


# <<< End code PasteBin >>>


# <<< Dice game >>>
first_dice: dict = {'username': None, 'dice': 0}
second_dice: dict = {'username': None, 'dice': 0}


@bot.message_handler(commands=['dice'])  # /dice
def dice_handler(message: Message) -> None:
    log(message, 'info')
    res = requests.post(f'https://' + f'api.telegram.org/bot{TOKEN}/sendDice?chat_id={message.chat.id}').json()
    t = Timer(120.0, reset_users)
    if first_dice['username'] is None:
        first_dice['username'], first_dice['dice'] = message.from_user.username, res['result']['dice']['value']
        t.start()
    elif second_dice['username'] is None:
        second_dice['username'], second_dice['dice'] = message.from_user.username, res['result']['dice']['value']
        t.cancel()
        if first_dice['username'] != second_dice['username']:
            bot.send_chat_action(message.chat.id, 'typing')
            time.sleep(4)
            if first_dice['dice'] > second_dice['dice']:
                bot.send_message(message.chat.id, f'{first_dice["username"].title()}ü•á –ø–æ–±–µ–¥–∏–ª '
                                                  f'{second_dice["username"].title()}ü•à')
            elif first_dice['dice'] < second_dice['dice']:
                bot.send_message(message.chat.id, f'{second_dice["username"].title()}ü•á –ø–æ–±–µ–¥–∏–ª '
                                                  f'{first_dice["username"].title()}ü•à')
            else:
                bot.send_message(message.chat.id, '–ü–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞ü§ù')
        reset_users()


def reset_users() -> None:  # Reset users for Dice game
    first_dice['username'] = None
    first_dice['dice'] = 0
    second_dice['username'] = None
    second_dice['dice'] = 0


# <<< End dice game >>>


# <<< All message >>>
@bot.message_handler(content_types=['text'])  # All messages
@bot.edited_message_handler(content_types=['text'])
def text_handler(message: Message) -> None:
    if dt.fromtimestamp(message.date).strftime("%Y-%m-%d-%H.%M.%S") >= dt.now().strftime("%Y-%m-%d-%H.%M.%S"):
        log(message, 'info')
        text = message.text.lower()
        if text in ['—Å—Ç–∏–∫–µ—Ä', '—Å—Ç–∏–∫–µ—Ä–æ—á–µ–∫', 'sticker']:
            gn_sticker_handler(message)
        elif text in ['–≥–∏—Ñ–∫–∞', '–≥–∏—Ñ', '–≥–∏—Ñ–æ–Ω', 'gif']:
            gif_handler(message)
        elif text in ['–º–µ–º', '–º–µ–º–∞—Å', '–º–µ–º—á–∏–∫', 'meme']:
            meme_handler(message)
        elif text in ['—à—É—Ç–∫–∞', '—à—É—Ç–∫—É', 'joke']:
            joke_handler(message)
        elif text in ['–∫—É–±–∏–∫', '–∑–∞—Ä–∏–∫', '–∫–æ—Å—Ç—å', '—Ö—É—é–±–∏–∫', 'dice']:
            dice_handler(message)
        if rend_d():
            for i in [',', '.', '!', '?', '\'', '\"', '-', '_', ':', ';', '@', '(', ')', '#']:
                text = text.replace(i, '')
            text = list(text.split(' '))
            result = [x for x in text if x in db.get_all_word()]
            if result:
                bot.reply_to(message, db.get_answer(random.choice(result)))
            elif rend_d():
                bot.reply_to(message, db.get_simple_answer())


# <<< End all message >>>


# <<< Answer's  >>>
@bot.message_handler(content_types=['voice'])  # Answer on voice
def voice_handler(message: Message) -> None:
    if rend_d():
        bot.send_chat_action(message.chat.id, 'typing')
        bot.reply_to(message, random.choice(['–ß—ë —Ç—ã —Ç–∞–º –ø–∏–∑–¥–∞–Ω—É–ª? –ü–æ–≤—Ç–æ—Ä–∏!', '–ü–∏—Å–∫–ª—è–≤—ã–π –≥–æ–ª–æ—Å–æ–∫',
                                             '–õ—É—á—à–µ –±—ã —è —ç—Ç–æ –Ω–µ —Å–ª—ã—à–∞–ª']))


@bot.message_handler(content_types=['new_chat_members'])  # Answer on new member
def new_member_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, random.choice(['–û–ø–∞ —á–∏—Ä–∏–∫! –í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è',
                                                     '–ê–ª–æ—Ö–∞ –¥—Ä—É–≥ –º–æ–π!']))


@bot.message_handler(content_types=['left_chat_member'])  # Answer on left group
def left_member_handler(message: Message) -> None:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, random.choice(['–°–ª–∏–ª—Å—è –ø–∞–¥–ª–æ(', '–ë—É–µ–Ω–æ—Å –º—É—á–∞—á–µ—Å –ø–∏–¥—Ä–∏–ª–∞—Å', '–ü—Ä–æ—â–∞–π –ª—é–±–æ–≤—å –º–æ—è']))


@bot.message_handler(content_types=['location'])  # Answer on location
def location_handler(message: Message) -> None:
    if rend_d():
        bot.send_chat_action(message.chat.id, 'typing')
        bot.reply_to(message.chat.id, ['–°–∫–∏–Ω—É–ª –º—É—Å–æ—Ä–∞–º', '–ü—Ä–∏–∫–æ–ø –∏–ª–∏ –º–∞–≥–Ω–∏—Ç?', '–ï–±–µ–Ω—è –∫–∞–∫–∏–µ —Ç–æ'])


@bot.message_handler(content_types=['contact'])  # Answer on contact
def contact_handler(message: Message) -> None:
    if rend_d():
        bot.send_chat_action(message.chat.id, 'typing')
        bot.reply_to(message.chat.id, random.choice(['–ï—Å–ª–∏ –º–Ω–µ –±—É–¥–µ—Ç –æ–¥–∏–Ω–æ–∫–æ –∏ —Ö–æ–ª–æ–¥–Ω–æ —è –∑–Ω–∞—é –∫—É–¥–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å',
                                                     '–¢—Ä—É–±–∫—É –Ω–µ –±–µ—Ä—É—Ç', '–°–æ—Ö—Ä–∞–Ω–∏–ª']))


# <<< End answer's  >>>


bot.polling(none_stop=True)
time.sleep(100)
